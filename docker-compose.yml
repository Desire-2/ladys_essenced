version: '3.8'

services:
  # PostgreSQL Database (for production)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ladys_essence
      POSTGRES_USER: ladys_essence_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change-this-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ladys_essence_user -d ladys_essence"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-false}
      - DATABASE_URL=${DATABASE_URL:-postgresql://ladys_essence_user:${DB_PASSWORD:-change-this-password}@db:5432/ladys_essence}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-jwt-secret}
      - SECRET_KEY=${SECRET_KEY:-change-this-flask-secret}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
    volumes:
      - backend_data:/app/instance
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5000/api}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  backend_data:
